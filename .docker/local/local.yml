version: '3.8'

# Services
services:

  # Nginx Service
  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./app:/var/www/app
      - ./.docker/local/keys:/var/keys
      - ./.docker/local/nginx/conf.d:/etc/nginx/conf.d
      - ./.docker/local/nginx/certs:/etc/nginx/certs
    depends_on:
      - backend
      - frontend
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      app__network:

  # Python/Django Service
  backend:
    env_file: ./.env
    entrypoint: "/var/www/app/./local entry_backend"
    build:
      context: .
      dockerfile: backend.Dockerfile
    command: "/var/www/app/./local run_backend"
    expose:
      - 8000
    networks:
      app__network:
    volumes:
      - ./app:/var/www/app
    # depends_on:
    #   mysql:
    #     condition: service_healthy

  # Node/Next.js Service
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    entrypoint: "/var/www/app/./local entry_frontend"
    expose:
      - 3000
    command: "/var/www/app/./local run_frontend"
    networks:
      app__network:
    volumes:
      - ./app:/var/www/app
    # depends_on:
    #   mysql:
    #     condition: service_healthy

  # MySQL Service
  # mysql:
    # image: mysql/mysql-server:8.0
    #    environment:
    #      MYSQL_DATABASE: ${LOCAL_DATABASE}
    #      MYSQL_ROOT_USER: ${LOCAL_USER}
    #      MYSQL_ROOT_PASSWORD: ${LOCAL_PASSWORD}
    #      MYSQL_ROOT_HOST: "%"
    # volumes:
    #   - ../.docker/local/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    #   - ../.docker/local/mysql:/docker-entrypoint-initdb.d
    #   - mysqldata:/var/lib/mysql
    # healthcheck:
    #      test: mysqladmin ping -h 127.0.0.1 -u ${LOCAL_USER} --password=${LOCAL_PASSWORD}
    #      interval: 5s
    #      retries: 10

# Networks
networks:
  app__network:
