{"kind":"FETCH","data":{"headers":{"allow":"GET, HEAD, OPTIONS","connection":"close","content-length":"19538","content-type":"application/json","cross-origin-opener-policy":"same-origin","date":"Thu, 17 Aug 2023 03:27:42 GMT","link":"<http://backend:8000/webmention/receive>; rel=\"webmention\"","referrer-policy":"same-origin","server":"gunicorn","vary":"Accept, origin, Cookie","x-content-type-options":"nosniff","x-frame-options":"DENY"},"body":"eyJpZCI6OSwidGl0bGUiOiJDYXJzIGFuZCBGaXNoIiwiYXV0aG9yIjoiRGFuaWVsIFRvbXBraW5zIiwiZGVzY3JpcHRpb24iOiJGYXIgdG9vIG1hbnkgb2YgdXMgaGF2ZSBiZWVuIGluIHRoZSBzYW1lIGd1dC13cmVuY2hpbmcgc2l0dWF0aW9uLiBZb3UncmUgbGF0ZS4gVGhlIGRvb3JzIHNsYW0gYXMgeW91IHJ1c2ggaW50byB5b3VyIGNhci4gVGhlbiB5b3UgdHVybiB0aGUga2V5LCBhbmQgLi4uIDxpPm5vdGhpbmc8L2k+LiBJZiB5b3UncmUgbGVzcyB1bmx1Y2t5LCB5b3UgbWlnaHQgc3RpbGwgaGVhciBhIGNsaWNr4oCUIG9yIHNlZSB0aGUgZmxhc2ggb2YgYSBkYXNoIGljb24uLi4iLCJzbHVnIjoiY2FyLWhhY2tpbmciLCJsaWtlcyI6MCwiY3JlYXRlZF9hdCI6IjIwMjEtMDQtMThUMjA6MjI6MDAtMDQ6MDAiLCJ1cGRhdGVkX2F0IjoiMjAyMS0wNC0xOFQyMDoyMjowMC0wNDowMCIsImZlYXR1cmVkX2ltYWdlIjoiL2FwcC9iYWNrZW5kL3VwbG9hZHMvdXBsb2Fkcy9ibG9nL2Nhci1oYWNraW5nL3Bvc3RfY29ycm9zaW9uLmpwZyIsImltYWdlX2FsdCI6IkV4YW1wbGUgb2YgbGVhZC1hY2lkIGJhdHRlcnkgcG9zdCBjb3Jyb3Npb24iLCJjb250ZW50IjoiPFByb3NlV3JhcHBlcj5cbiMjIDAzLzEyIEZpc2ggRnJ5IEtlcmZ1ZmZsZVxuXG5JZiB5b3UncmUgZmFtaWxpYXIgd2l0aCB0aGUgQ2hyaXN0aWFuIG9ic2VydmF0aW9uIG9mIExlbnTigJQgbWVhdCBpcyBmb3JiaWRkZW4gb24gRnJpZGF5cy4gQXMgYSByZXN1bHQsIGEgbG90IG9mIGNodXJjaGVzIGhvc3QgRnJpZGF5LW5pZ2h0IGZpc2ggZnJ5IGRpbm5lcnMsIGFuZCBJIGhhZCBiZWVuIGxlYXZpbmcgdG8gcGljayB1cCBteSBiYXR0ZXJlZCBjb2QgZGlubmVyLlxuXG5Tb21lb25lIHNob3dlZCBtZSBhbiBpbnRlcmFjdCBbZmlzaCBmcnkgbWFwXShodHRwczovL2NvZGVmb3JwaXR0c2J1cmdoLmdpdGh1Yi5pby9maXNoZnJ5bWFwLykgdGhhdCdkIGJlZW4gY29kZWQgYnkgX0NvZGUgZm9yIFBpdHRzYnVyZ2hfLiBTaWRlIG5vdGU6IENvZGUgZm9yIFBpdHRzYnVyZ2ggbG9va3MgbGlrZSBhIHJlYWxseSBjb29sIGdhbmcgb2YgbGlrZS1taW5kZWQgY29kZXJzLCBhbmQgdGhleSd2ZSBidWlsdCBzb21lIG5lYXQgc3R1ZmYgdG9nZXRoZXIuXG5cbjxPbmVDb2x1bW4+XG4gIDxJbWFnZVdyYXBwZXJcbiAgICBhbHQ9XCJTY3JlZW5zaG90IGZyb20gdGhlIG9mZmljaWFsIDIwMjEgUGl0dHNidXJnaCBMZW50ZW4gRmlzaCBGcnkgTWFwIGZyb20gQ29kZSBmb3IgUGl0dHNidXJnaFwiXG4gICAgc3JjPVwiL2Fzc2V0cy9pbWcvYmxvZy9jYXItaGFja2luZy9maXNoX2ZyeV9tYXAuanBnXCJcbiAgICB3aWR0aD17IDczNyB9XG4gICAgaGVpZ2h0PXsgNjg2IH1cbiAgLz5cbjwvT25lQ29sdW1uPlxuXG5Vc2luZyB0aGUgbWFwLCBJIHBpY2tlZCBvdXQgYSBjaHVyY2ggaW4gbmVhcmJ5IFNoYWR5c2lkZS4gV2UgcHJlLW9yZGVyZWQgdHdvIGZyaWVkIGZpc2ggc2FuZHdpY2hlcyBmb3IgcGlja3VwIGF0IDU6NDVwbS4gTmF0dXJhbGx5LCBJIHdhcyBsYXRlLCBydXNoaW5nIHRvIHRoZSBjYXIgYXQgNTo1MHBtLCBJIHJvbGxlZCAoaXQncyBsb3cpIGludG8gdGhlIGZyb250IHNlYXQgYW5kIHNsYW1tZWQgdGhlIGRvb3JzLiBJIGNvdWxkIHNlZSB0aGUgdGFydGFyIHNhdWNlIGluIG15IG1pbmQncyBleWUgLi4uXG5cblRoZW4gSSB0dXJuZWQgdGhlIGtleSAuLi4gX25vdGhpbmdfLiBGYXIgdG9vIG1hbnkgb2YgdXMgaGF2ZSBiZWVuIGluIHRoZSBzYW1lIGd1dC13cmVuY2hpbmcgc2l0dWF0aW9uLiBJZiB5b3UncmUgbGVzcyB1bmx1Y2t5LCB5b3UgbWlnaHQgc3RpbGwgaGVhciBhIGNsaWNr4oCUIG9yIHNlZSB0aGUgZmxhc2ggb2YgYSBkYXNoIGljb24uXG5cblRoZSBzdGFrZXMgd2VyZSBzdGlsbCBwcmV0dHkgbG93LiBJJ3ZlIGJlZW4gd29ya2luZyByZW1vdGVseSBzaW5jZSBTZXB0ZW1iZXIgMjAyMC4gU28sIEknbSBibGVzc2VkIHRoYXQgSSB3YXNuJ3QgcmVseWluZyBvbiB0aGUgY2FyIHRvIGdldCB0byBteSBqb2IuIEluIHRoZSBncmFuZCBzY2hlbWUgb2YgdGhpbmdzIChXRkgsIHBhbmRlbWljLCBpbiB0aGUgZ2FyYWdlLCBvbiBhIEZyaWRheSksIHRoaXMgd2FzIHByb2JhYmx5IHRoZSBiZXN0LWNhc2Ugc2NlbmFyaW8gZm9yIGEgZGVhZCBiYXR0ZXJ5LlxuXG4jIyMgSnVtcC1TdGFydGluZyBhIERlYWQgQmF0dGVyeVxuXG5NeSBuZWlnaGJvciBoYXBwZW5lZCB0byBiZSBwdWxsaW5nIGludG8gdGhlIGRyaXZld2F5IG5leHQgZG9vci4gU28sIGluIGRlc3BlcmF0aW9uLCBJIGh1cnJpZWRseSBhc2tlZCBpZiBJIGNvdWxkIGdldCBhIGp1bXAuIElmIHlvdSdyZSBsaWtlIG1lIGFuZCBhbHdheXMgZm9yZ2V0IHRoZSBjb25uZWN0aW9uIHN0ZXBzLCBlbmpveSB0aGlzIGJlYXV0aWZ1bCBpbGx1c3RyYXRpb24gYnkgeW91cnMgdHJ1bHk6XG5cbjxPbmVDb2x1bW4+XG4gIDxJbWFnZVdyYXBwZXJcbiAgICBhbHQ9XCJEaWFncmFtIHNob3dpbmcgY29ubmVjdGlvbiBzdGVwcyBmb3IganVtcGVyIGNhYmxlcy4gRmlyc3QgY29ubmVjdCB0byB0aGUgZGVhZCBiYXR0ZXJ5J3MgcG9zaXRpdmUgcG9zdCAoMSksIHRoZW4gdGhlIHJ1bm5pbmcgYmF0dGVyeSdzIHBvc2l0aXZlIHBvc3QgKDIpIHdpdGggdGhlIHJlZC93aGl0ZSBjYWJsZS4gTmV4dCwgY29ubmVjdCB0aGUgbmVnYXRpdmUgcG9zdCAoMykgb2YgdGhlIHJ1bm5pbmcgY2FyJ3MgYmF0dGVyeS4gTGFzdGx5LCBjb25uZWN0IHRvIHRoZSBtZXRhbCBmcmFtZSAoNCkgb3Igb3RoZXIgZXhwb3NlZCBncm91bmQgb24gdGhlIGRlYWQgY2FyLlwiXG4gICAgc3JjPVwiL2Fzc2V0cy9pbWcvYmxvZy9jYXItaGFja2luZy9iYXR0ZXJ5X2p1bXAuc3ZnXCJcbiAgICB3aWR0aD17IDc0MCB9XG4gICAgaGVpZ2h0PXsgNDI4IH1cbiAgICBjYXB0aW9uPXsgZmFsc2UgfVxuICAvPlxuPC9PbmVDb2x1bW4+XG5cbkFwcGFyZW50bHksIHlvdSBjYW4gYWxzbyBnbyBmcm9tIHRoZSBydW5uaW5nIGNhcidzIGZyYW1lICgjMyksIGFuZCBjb25uZWN0ICgjNCkgdG8gdGhlIGRlYWQgYmF0dGVyeSdzIG5lZ2F0aXZlIHBvc3QuIEhvd2V2ZXIsIHRoZSBhYm92ZSBvcmRlciBpcyB3aGF0IEkndmUgbW9zdCBjb21tb25seSBzZWVuICh5b3UncmUgd2VsY29tZSBmdXR1cmUsIHN0cmFuZGVkIHNlbGYpLlxuXG5XZSBob29rZWQgdXAgdGhlIGNhYmxlcy4gVG8gbXkgdW5kZXJzdGFuZGluZywgdGhlIGFsdGVybmF0b3Igc3BpbnMgZmFzdGVyIHdoZW4geW91IHJldiB0aGUgZW5naW5l4oCUIGFuZCwgY29uc2VxdWVudGx5LCBvdXRwdXRzIGEgaGlnaGVyIGFtcGVyYWdlLiBTbywgaG9sZGluZyB0aGUgcGVkYWwgYXQgYWJvdXQgMjAwMCBSUE0gbWlnaHQgYmUgcHJvZHVjdGl2ZeKAlCBlc3BlY2lhbGx5IGZvciBiaWdnZXIgZW5naW5lcy5cblxuVGhpcyBzaG91bGQgcHV0IG91dCBiZXR3ZWVuIDE0ViBhbmQgMTVWIGZyb20gYW4gaWRsaW5nIHZlaGljbGUuIElmIHlvdSBtZWFzdXJlIGxlc3MgdGhhbiAxM1YgYWNyb3NzIHRoZSBiYXR0ZXJ5J3MgcG9zdHMgd2hpbGUgdGhlIGNhciBpcyBydW5uaW5nLCB0aGVuIGl0J3MgbW9yZSBsaWtlbHkgeW91IGhhdmUgYW4gaXNzdWUgd2l0aCB5b3VyIGFsdGVybmF0b3IgKHdoaWNoIGNoYXJnZXMgdGhlIGJhdHRlcnkpLlxuXG5XZSBtdXN0IGhhdmUgbGV0IGhpcyBjYXIgcmV2IGZvciBhdCBsZWFzdCA1IG1pbnV0ZXMgd2l0aG91dCBhIGNsaWNrLCBibGluayBvciB3aGlzcGVyIGZyb20gb3VyIENhbXJ5LiBJbiBhIGxhc3QgZGl0Y2gsIEkgdHJpZWQgYml0aW5nIGludG8gdGhlIGJhdHRlcnkncyB0ZXJtaW5hbHMgdXNpbmcgdGhlIGp1bXBlciBjYWJsZSdzIGNvcHBlciBhbGxpZ2F0b3ItdGVldGjigJQgc3RpbGwgbm90aGluZy4gSSB0aGFua2VkIG15IG5laWdoYm9yIGZvciB0cnlpbmcsIGJ1dCBpdCBzZWVtZWQgdG9hc3RlZOKAlCBrYXB1dC5cblxuQWxhcywgaXQgd2FzIG5vdCBvdXIgZGVzdGlueSB0byB0YXN0ZSB0aGUgYnV0dGVyeSwgZmlzaHkgZmxhdm9yIHRoYXQgbmlnaHQuXG5cbiMjIDAzLzEzIENhbXJ5IERlYnVnZ2luZ1xuXG5UbyByZWNhcDpcbkZpc2ggRnJpZGF5LiBZZXQgbm8gdGFuZ3ktc3dlZXQgdGFydGFyIHNhdWNlLlxuXG5NeSBmaWFuY8OpZSBhbmQgSSBhY3R1YWxseSBhdHRlbXB0ZWQgKGFmdGVyIHNvbWUgcmFwaWQgZGVsaWJlcmF0aW9uKSB0byBiaWN5Y2xlIGFjcm9zcyBQaXR0c2J1cmdoJ3MgRWFzdCBFbmQgdG8gdGhlIGNodXJjaC5cblxuVW5mb3J0dW5hdGVseSwgdGhlIGhpbGxzIG9mIFBpdHRzYnVyZ2ggYXJlIHVuZm9yZ2l2aW5nIHRvIGZsYXQtbGFuZCBJbGxpbm9pc2VycyBsaWtlIG15c2VsZi4gV2UgYWxzbyByZWFsaXplZCwgYWZ0ZXIgYWJvdXQgYSBoYWxmLW1pbGUgb2YgYmlraW5nLCB0aGF0IHRoZSBraXRjaGVuIHdvdWxkIGRlZmluaXRlbHkgYmUgY2xvc2VkIGJ5IHRoZSB0aW1lIHdlIHdvdWxkIGFycml2ZS5cblxuSSBjYWxsZWQgdGhlIGNodXJjaCwgYW5kIHRoZXkga2luZGx5IHNhaWQgdGhleSdkIGNvbXAgdGhlIGRpbm5lcnMgd2UnZCBvcmRlcmVkIGZvciB0aGUgbmV4dCBGcmlkYXkuIFdpdGhvdXQgYW55IHByZXNzaW5nIGFwcG9pbnRtZW50cyBvciBwbGFucyBmb3IgdGhlIHdlZWtlbmQsIEkgbWFkZSBpdCBwcmlvcml0eSBvbmUgdG8gZ2V0IHRoZSBjYXIgcnVubmluZ+KAlCBhbmQgdG8gZ2V0IHRob3NlIGJhdHRlcmVkIGNvZHMgaW4gb25lIHdlZWsncyB0aW1lLlxuXG4jIyMgVW5kZXIgdGhlIEhvb2RcblxuU2F0dXJkYXkgd2FzIGFuIHVuc2Vhc29uYWJseSBiZWF1dGlmdWwgZGF5IGZvciBNYXJjaCBpbiBQaXR0c2J1cmdoOyBzbywgSSBvcGVuZWQgdGhlIGdhcmFnZSBkb29yIGFuZCBkdWNrZWQgdW5kZXIgdGhlIGhvb2Qgb2YgdGhlIENhbXJ5LiBUaGUgZmlyc3QgdGhpbmcgdGhhdCBzdG9vZCBvdXQgd2FzIHRoZSBjb3Jyb3Npb24gYWxsIG92ZXIgdGhlIGJhdHRlcnkncyBwb3N0cy4gSXQgd2FzIGhlY2tpbiBjcnVzdHkgYW5kIGdyb3NzLiDwn5GHXG5cblRoYXQgd2hpdGUgKG9yIGJsdWlzaC1ncmVlbikgcG93ZGVyeSBzdHVmZiBpcyBhcHBhcmVudGx5IGVpdGhlciBsZWFkIHN1bGZhdGUgb3IgYW5oeWRyb3VzIGNvcHBlciBzdWxmYXRlLiBBcyB0aGlzIGNvcnJvc2lvbiBidWlsZHMgdXAsIHNvIGRvZXMgdGhlIGJhdHRlcnkncyByZXNpc3RhbmNlLiBObyBnb29kLlxuXG5JIGR1ZyB0aHJvdWdoIHRoZSBtYW50bGUgb2YgcG93ZGVyIHdpdGggdGhlIG11bHRpbWV0ZXIgcHJvYmVzIHRvIGZpbmQgdGhhdCB0aGUgYmF0dGVyeSB3YXMgcmVwb3J0aW5nIGEgbWVyZSAxLjc5Vi4gVGhhdCdzIGNsb3NlIHRvIDEwJSBvZiB0aGUgYmF0dGVyeSdzIGZ1bGwgY2FwYWNpdHkuXG5cbjxPbmVDb2x1bW4+XG4gIDxJbWFnZVdyYXBwZXJcbiAgICBhbHQ9XCJFeGFtcGxlIG9mIGxlYWQtYWNpZCBiYXR0ZXJ5IHBvc3QgY29ycm9zaW9uXCJcbiAgICBzcmM9XCIvYXNzZXRzL2ltZy9ibG9nL2Nhci1oYWNraW5nL3Bvc3RfY29ycm9zaW9uLmpwZ1wiXG4gICAgd2lkdGg9eyA5NjAgfVxuICAgIGhlaWdodD17IDU0MCB9XG4gIC8+XG48L09uZUNvbHVtbj5cblxuVGhhdCBuYXN0eSBidXNpbmVzcyBpcyBsZWFkIHN1bGZhdGUgb3IgYW5oeWRyb3VzIGNvcHBlciBzdWxmYXRlLiBIeWRyYXRpbmcgYW5oeWRyb3VzIGNvcHBlciBzdWxmYXRlIGdpdmVzIGl0IHRoZSBncmVlbiBvciBibHVlIHRpbmdlLiBUaGlzIFtOT0NPIGJsb2cgcG9zdF0oaHR0cHM6Ly9uby5jby9ibG9nL3VsdGltYXRlLWd1aWRlLXRvLWNsZWFuLWFuZC1yZW1vdmUtY2FyLWJhdHRlcnktY29ycm9zaW9uKSB3YXMgYSBncmVhdCByZXNvdXJjZSBmb3IgdW5kZXJzdGFuZGluZyBiYXR0ZXJ5IG1haW50ZW5hbmNlIGFuZCBzYWZldHnigJQgcGx1cyBJIHJlYWxseSBsaWtlZCB0aGUgZ3JhcGhpY3MuXG5cblNpbmNlIHRoZSBqdW1wIGRpZG4ndCB3b3JrIGFuZCB0aGUgYmF0dGVyeSB3YXMgcmVhZGluZyBhbiBpbmNyZWRpYmx5IGxvdyB2b2x0YWdlLCBteSBjb25jbHVzaW9uIHdhcyB0aGF0IGl0IG5lZWRlZCB0byBiZSByZXBsYWNlZC5cblxuSXQncyBzdXBlciBlYXN5IHRvIGdldCB0aGUgYmF0dGVyeSBvdXQuIERvaW5nIHRoaXMgam9iIG9uIGEgQ2FtcnksIGEgKioxMG1tIHNvY2tldCoqIChJIHJlY29tbWVuZCBhIGxpdHRsZSBib3gtZW5kIHRvbyBmb3IgdGhlIHRlcm1pbmFsIGNsYW1wcykgaXMgcHJvYmFibHkgdGhlIG9ubHkgdG9vbCB5b3UgcmVhbGx5IG5lZWQuXG5cbkkgcmVjb21tZW5kIGxvb3NlbmluZyB0aGUgbnV0IG9uIGVhY2ggYmF0dGVyeSB0ZXJtaW5hbCBjbGFtcCBiZWZvcmUgdGhlIGJvbHQgdHlpbmcgdGhpcyBicmFja2V0IHRvIHRoZSBmcmFtZS4gSSBtYWRlIHRoZSBtaXN0YWtlIG9mIHRha2luZyBvZmYgdGhlIGJyYWNrZXQgZmlyc3QgYW5kIGl0IHdhcyBhIHBhaW4gdG8gYnJlYWsgdGhlIGNvcnJvZGVkIG51dHMgbG9vc2Ugb24gdGhlIHRlcm1pbmFscyB3aXRoIHRoZSBiYXR0ZXJ5IGxvb3N5LWdvb3N5LlxuXG5PbmNlIHlvdSBnZXQgdGhlIGZyb250IGJvbHQgb3V0LCB0aGVyZSdzIGEgaG9va2VkIHRlbnNpb24tcm9kIG9uIHRoZSBiYWNrIHRoYXQgd2lsbCBuZWVkIHRvIGRyb3AgZG93bi4gVGhlbiB5b3UgY2FuIHByZXR0eSBlYXNpbHkgcmVtb3ZlIHRoZSBicmFja2V0IGVudGlyZWx5LiBJZiB5b3UgZG8gaXQgdGhpcyB3YXksIHlvdSBtaWdodCBiZSBhYmxlIHRvIGF2b2lkIGRlYWxpbmcgd2l0aCB0aGUgdGVuc2lvbmluZyBib2x0IGF0IGhlIG90aGVyIGVuZCBvZiB0aGUgYnJhY2tldCAoc2VlIHRoZSBpbWFnZSBiZWxvdykuXG5cbjxUd29Db2x1bW4+XG4gIDxJbWFnZVdyYXBwZXJcbiAgICBhbHQ9XCJDb3Jyb2RlZCBiYXR0ZXJ5IHN0aWxsIGluc3RhbGxlZCBpbiBDYW1yeSdzIGVuZ2luZSBiYXkuIFJlZCBjaXJjbGUgc2hvd2luZyBwb3N0LWNsYW1wIHRpZ2h0ZW5pbmcgbnV0IGFuZCB0aGUgbWFpbiBib2x0IGZvciB0aGUgYmF0dGVyeS1yZXRhaW5pbmcgY2xhbXAgYnJhY2tldC5cIlxuICAgIHNyYz1cIi9hc3NldHMvaW1nL2Jsb2cvY2FyLWhhY2tpbmcvYmF0dGVyeV9ib2x0cy5qcGdcIlxuICAgIHdpZHRoPXsgMzM4IH1cbiAgICBoZWlnaHQ9eyA2MDAgfVxuICAvPlxuICA8SW1hZ2VXcmFwcGVyXG4gICAgYWx0PVwiQ29ycm9kZWQgVG95b3RhIDIwMTAgQ2FtcnkgYmF0dGVyeSBzaXR0aW5nIG9uIHRoZSBnYXJhZ2UgZmxvb3IgbmV4dCB0byBjcmVzY2VudCB3cmVuY2hlcyBhbmQgYmF0dGVyeSBjbGFtcGluZyBicmFja2V0IGZvciBtb3VudGluZyBpbiBjYXIuXCJcbiAgICBzcmM9XCIvYXNzZXRzL2ltZy9ibG9nL2Nhci1oYWNraW5nL3Rvb2tfdGhhdF9zaGl0X291dC5qcGdcIlxuICAgIHdpZHRoPXsgNTQwIH1cbiAgICBoZWlnaHQ9eyA5NjAgfVxuICAvPlxuPC9Ud29Db2x1bW4+XG5cblJlYWxseSBvbmx5IDIgbnV0cyBhbmQgMSBib2x0IHRvIGdldCB0aGUgYmF0dGVyeSBvdXQuIEJvdGggdGhlIHRlcm1pbmFsIGNsYW1wIG51dHMgYW5kIHRoZSBib2x0IHR5aW5nIHRoZSBiYXR0ZXJ5IGJyYWNrZXQgdG8gdGhlIGZyb250IG9mIHRoZSBjYXIgZnJhbWUgdXNlIGEgMTBtbSBzb2NrZXQuXG5cbldpdGggdGhlIGJhdHRlcnkgZmluYWxseSBvdXQsIEkgbG9va2VkIGFyb3VuZCB0aGUgb3V0c2lkZSB0byBmaW5kIGEgbG9uZyBzdHJpbmcgb2YgbGV0dGVycyBhbmQgbnVtYmVycyB0aGF0IGhhZCBiZWVuIGhlYXQtc3RhbXBlZCBpbnRvIHRoZSBwbGFzdGljOlxuXG4+IFRoZSBmaXJzdCBsZXR0ZXIgcmVmZXJzIHRvIHRoZSBtb250aCBpdCB3YXMgbWFudWZhY3R1cmVkOiBBLUwgcmVmZXJzIHRvIEphbnVhcnkg4oCTIERlY2VtYmVyLiBUaGUgbnVtYmVyIHJlZmVycyB0byB0aGUgeWVhciBpbiB3aGljaCB0aGUgYmF0dGVyeSB3YXMgbWFkZS4gRm9yIGV4YW1wbGU6IDIgd291bGQgYmUgMjAxMiwgMyB3b3VsZCBiZSAyMDEzLCA0IHdvdWxkIGJlIDIwMTQsIGV0Yy4gVGhlIGxhc3QgbGV0dGVyIHJlZmVycyB0byB0aGUgcGxhbnQgaW4gd2hpY2ggdGhlIGJhdHRlcnkgd2FzIG1hZGUuW14xXVxuXG5NeSBUb3lvdGEtbWFudWZhY3R1cmVkIGJhdHRlcnkgaGFkIHRoZSBudW1iZXIgXCI4XCIuIFNpbmNlIHRoZSBhdmVyYWdlIGxpZmVzcGFuIG9mIGEgbm9ybWFsIGNhciBiYXR0ZXJ5IGlzIGJldHdlZW4gMi01IHllYXJzLCBpdCB3YXMgbW9zdCBsaWtlbHkgbWFudWZhY3R1cmVkIGluIDIwMTguW14yXSBSLkkuUC4gYmF0dGVyeSwgSSBwcm9taXNlIHRvIHRha2UgYmV0dGVyIGNhcmUgb2YgdGhlIG5leHQgb25lLlxuXG4jIyMgQ29zdGNvIE1lbWJlcnNoaXBcblxuVGhlcmUgYXJlIGEgY291cGxlIHN0b3JlcyAoQXV0b1pvbmUsIEFkdmFuY2UgQXV0byBQYXJ0cywgTycgUmVpbGx5IEF1dG8gUGFydHMsIEZpcmVzdG9uZSwgZXRjLikgdGhhdCB3aWxsIGFwcGFyZW50bHkgdGVzdCB5b3VyIGJhdHRlcnkgZm9yIGZyZWUuIElmIHlvdSBoYXZlIGEgc3BhcmUsIGl0IG1pZ2h0IGJlIGdvb2QgdG8gY2xlYW4gdXAgdGhlIGRlYWQgYmF0dGVyeSBhbmQgdGFrZSBpdCBvdmVyIHRvIHRoZW0uIFlvdSBjb3VsZCBmaW5kIG91dCBpZiB5b3VyIGJhdHRlcnkgaXMgZGVmaW5pdGVseSBzaG90IG9yIGlmIHRoZSBwcm9ibGVtIG1pZ2h0IGxpZSBlbHNld2hlcmUuXG5cbkkgd2FzIGVhZ2VyIHRvIGdldCB0aGlzIGZpeGVkLCBzbyBJIHdlbnQgYWhlYWQgYW5kIGRlY2lkZWQgdG8gcHVyY2hhc2UgYSBuZXcgYmF0dGVyeS4gTGlrZSBhbnkgcHJvZHVjdCwgdGhlcmUgYXJlIGdvb2QgYW5kIGJhZCBtYW51ZmFjdHVyZXJzLiBJdCBjYW4gYmUgaGVscGZ1bCB0byByZWFkIHJldmlld3MgYW5kIG1ha2Ugc3VyZSB5b3UncmUgZ2V0dGluZyB5b3VyIG1vbmV5J3Mgd29ydGguXG5cblRoZSBvbmx5IHR3byB0aGluZ3MgdGhhdCBhcmUgcmVhbGx5IGltcG9ydGFudCBpbiBwdXJjaGFzaW5nIGEgbmV3IGJhdHRlcnkgYXJlIHRoZSBiYXR0ZXJ5IFwiZ3JvdXBcIiBhbmQgdGhlIGNvbGQtY3JhbmtpbmcgYW1wcyAoQ0NBKS4gVGhlIDIwMTAgQ2FtcnkgdXNlcyBncm91cCAyNEYsIGFuZCB0aGUgQ0NBIG5lZWRzIHRvIG1lZXQgb3IgZXhjZWVkIDU4MiAodGhlIENDQSBvbiB0aGUgb3JpZ2luYWwsIFRveW90YS1tYW51ZmFjdHVyZWQgYmF0dGVyeSkuIEEgcXVpY2sgY29zdC1jb21wYXJpc29uIGFtb25nIHNvbWUgb2YgdGhlIG5lYXJieSBzdG9yZXMgeWllbGRlZCB0aGVzZSByZXN1bHRzOlxuXG48SG9yaXpvbnRhbFNjcm9sbGVyIGNhcHRpb249XCJCYXR0ZXJ5IGNvbXBhcmlzb24uIEFwcmlsLCA0dGggMjAyMS5cIj5cbjxUYWJsZVdyYXBwZXIgd2lkdGg9XCIxMDAwXCI+XG58IHN0b3JlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcmljZSArIGNvcmUgICAgIHwgQ0NBICB8IHdhcnJhbnR5ICAgICAgICAgICAgICAgICAgfFxufCA6LS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgOi0tLSAgICAgICAgICAgICB8IDotLS0gfCA6LS0tICAgICAgICAgICAgICAgICAgICAgIHxcbnwgW0FkdmFuY2UgQXV0byBQYXJ0c10oaHR0cHM6Ly9zaG9wLmFkdmFuY2VhdXRvcGFydHMuY29tL3AvZGllaGFyZC1nb2xkLWJhdHRlcnktZ3JvdXAtc2l6ZS0yNGYtNzUwLWNjYS0yNGYtNi8yMTMwMDAxLVA/bmF2aWdhdGlvblBhdGg9TDEqMTQ5MjAlN0NMMioxNTAwMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICQxNjkuOTkgKyAkMjIuMDAgfCA3NTAgIHwgMy15ZWFyIGZyZWUgcmVwbGFjZW1lbnQgICB8XG58IFtBdXRvWm9uZV0oaHR0cHM6Ly93d3cuYXV0b3pvbmUuY29tL2JhdHRlcmllcy1zdGFydGluZy1hbmQtY2hhcmdpbmcvYmF0dGVyeS9kdXJhbGFzdC1nb2xkLWJhdHRlcnktMjRmLWRsZy1ncm91cC1zaXplLTI0Zi03NTAtY2NhLzgzMjMyN18wXzApICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAkMTY5Ljk5ICsgJDE4LjAwIHwgNzUwICB8IDMteWVhciB3YXJyYW50eSAgICAgICAgICAgfFxufCBbQ29zdGNvXShodHRwczovL3d3dy5jb3N0Y28uY29tL2F1dG9tb3RpdmUtYmF0dGVyaWVzLmh0bWwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgJDg5Ljk5ICsgJDE1LjAwICB8IDcwMCAgfCAzLXllYXIgbGltaXRlZCB3YXJyYW50eSAgIHxcbnwgW0hvbWUgRGVwb3RdKGh0dHBzOi8vd3d3LmhvbWVkZXBvdC5jb20vcC9FeGlkZS1TUFJJTlRFUi1NQVgtMTItdm9sdHMtTGVhZC1BY2lkLTYtQ2VsbC0yNEYtR3JvdXAtU2l6ZS03NTAtQ29sZC1DcmFua2luZy1BbXBzLUJDSS1BdXRvLUJhdHRlcnktU1gyNEYvMzA4NDg4NTk5PykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICQ5OS4wMCArICQxNS4wMCAgfCA3NTAgIHwgMzAtbW9udGggZnJlZSByZXBsYWNlbWVudCB8XG58IFtPJyBSZWlsbHkgQXV0byBQYXJ0c10oaHR0cHM6Ly93d3cub3JlaWxseWF1dG8uY29tL2RldGFpbC9jL3Rlc3RlZC10b3VnaC1tYXgvbWFyaW5lLS0tYm9hdC9iYXR0ZXJ5LS0tYXV0b21vdGl2ZS85ZTBiMWQ3ZGFlNDQvbW90b3JjcmFmdC10ZXN0ZWQtdG91Z2gtbWF4LWJhdHRlcnktZ3JvdXAtc2l6ZS0yNGYtMjRyL21vdDIvYnh0MjRmYT9wb3M9NCkgfCAkMTM0Ljk5ICsgJDE4LjAwIHwgNzAwICB8IDMteWVhciBmcmVlIHJlcGxhY2VtZW50ICAgfFxufCBbV2FsbWFydF0oaHR0cHM6Ly93d3cud2FsbWFydC5jb20vaXAvRXZlclN0YXJ0LU1heHgtTGVhZC1BY2lkLUF1dG9tb3RpdmUtQmF0dGVyeS1Hcm91cC1TaXplLTI0Ri8yODI3NTY1NykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgJDk4Ljc2ICsgPyAgICAgICB8IDc1MCAgfCAzLXllYXIgZnJlZSByZXBsYWNlbWVudCAgIHxcbjwvVGFibGVXcmFwcGVyPlxuPC9Ib3Jpem9udGFsU2Nyb2xsZXI+XG5cblRoZSBjaGVhcGVzdCBvcHRpb25zIGJ5IGZhciB3ZXJlIENvc3RjbywgV2FsbWFydCwgYW5kIEhvbWUgRGVwb3QuIFRoZSBcImNvcmVcIiBjaGFyZ2Ugd2FzIGEgbmV3IGNvbmNlcHQgdG8gbWUgKHNvbWVvbmUgd2hvIGhhcyBkb25lIGxpdHRsZSB0byBubyBjYXIgcmVwYWlyKTsgYnV0IGl0J3MgaW1wb3J0YW50IHRvIG5vdGU6XG5cbj4gQ2VydGFpbiB0eXBlcyBvZiBhdXRvIHBhcnRzIGNhbiBiZSByZWN5Y2xlZCBvciwgbW9yZSBzcGVjaWZpY2FsbHksIHJlbWFudWZhY3R1cmVkIGZvciBmdXR1cmUgc2FsZS4gVGhlc2UgcGFydHMgaGF2ZSBhIGNvcmUgcHJpY2UgdGhhdCBpcyB1c2VkIGFzIGEgZm9ybSBvZiBkZXBvc2l0IG9uIHRoZSBwb3J0aW9uIG9mIHRoZSBwYXJ0IHRoYXQgY2FuIGJlIHJlbWFudWZhY3R1cmVkIGFuZCB0aGF0IGlzIGRlc2lnbmVkIHRvIGVuY291cmFnZSByZXR1cm4gb2YgdGhlIG9sZCBwYXJ0LiBUaGUgXCJjb3JlLFwiIHNpbXBseSBwdXQsIGlzIHlvdXIgb2xkIHBhcnQuIFJldHVybmluZyBjb3JlcyBjYW4gc2F2ZSB5b3UgbW9uZXkgb24gcmVwbGFjZW1lbnQgcGFydHMuW14zXVxuXG48Tm90ZSB0aXRsZT1cIlRMO0RSXCI+XG5NYWtlIHN1cmUgeW91IHJlY3ljbGUgeW91ciBvbGQgYmF0dGVyeSBpbnN0ZWFkIG9mIHRvc3NpbmcgaXQgb3V0IHRoZSB3aW5kb3csIGJlY2F1c2UgaXQgY291bGQgc2F2ZSB5b3UgJDIwIG9uIHRoZSBuZXcgb25lLlxuPC9Ob3RlPlxuXG5XYWxtYXJ0IGRpZG4ndCBzZWVtIHRvIGFkdmVydGlzZSB0aGVpciBjb3JlIGNoYXJnZTsgcmVnYXJkbGVzcywgSSBzb21laG93IGNvbnZpbmNlZCBteXNlbGYgdGhhdCB0aGUgJDYwIENvc3RjbyBtZW1iZXJzaGlwIG1pZ2h0IGJlIHdvcnRoIHRoZSAkMTAgb2Ygc2F2aW5ncyBmb3IgYSBDb3N0Y28gYmF0dGVyeS4uLlxuXG5BIGdlbmVyb3VzIGZyaWVuZCBnYXZlIG1lIGEgcmlkZSB0byBhIG5lYXJieSB3YXJlaG91c2UuIFRoaXMgd2FzIG15IGZpcnN0IHRpbWUgd2l0aGluIDEwMCBmZWV0IG9mIGEgQ29zdGNvLCBhbmQgPGk+dGhhdDwvaT4gZGVzZXJ2ZXMgaXRzIG93biBzdG9yeS4uLiBidXQgSSdsbCBzdGF5IG9uIHRvcGljLlxuXG5UaGUgc2FsZXMgcmVwIHJlY29tbWVuZGVkIHRoZSAoJDEyMCkgXCJHb2xkIFN0YXIgRXhlY3V0aXZlXCIgbWVtYmVyc2hpcCBhbmQgZGVzY3JpYmVkIHRoZSByZWFzb25zIHdoeSB0aGF0IHdhcyB0aGUgd2F5IHRvIGdvLiBUaGVyZSB3YXMgdmlzaWJsZSBkaXNhcHBvaW50bWVudCB3aGVuIEkgcmV2ZWFsZWQgdGhhdCBJIGhhZCBrbm93bGVkZ2Ugb2YgdGhlICQ2MCBvcHRpb24uXG5cbkFmdGVyIHNvbWUgdmVyeSB1bmNvbWZvcnRhYmxlIGJhY2stYW5kLWZvcnRoLCBJIHNpZ25lZCBteSBzb3VsIGF3YXkgYW5kIGdvdCBteSBwaWN0dXJlIHByaW50ZWQgb24gdGhlIHBsYXN0aWMgYWRtaXNzaW9uIHRvIHRoZSBjYXBpdGFsaXN0IHdhcmVob3VzZSBvZiB3b25kZXJzIChpbiBidWxrKS5cbldlIGdvdCBiYWNrIGFuZCBwbG9wcGVkIGluIHRoZSBuZXcgYmF0dGVyeS4gSSBob29rZWQgdGhlIHRlbnNpb24gcm9kIGJhY2sgYmVoaW5kIGFuZCB0aWdodGVuZWQgZG93biB0aGUgZnJvbnQgb2YgdGhlIGJyYWNrZXQgdG8gdGhlIGZyYW1lLiBUaGVyZSB3ZXJlIGEgZmV3IGFydGljbGVzIG9ubGluZSB0aGF0IHJlY29tbWVuZGVkIGEgbWl4dHVyZSBvZiBiYWtpbmcgc29kYSBhbmQgd2F0ZXIgZm9yIGNsZWFuaW5nIHVwIHRoZSBjb3Jyb3Npb24uXG5cbkkgc29ha2VkIHRoZSB0ZXJtaW5hbCBjbGFtcHMsIHRoZW4gYnJ1c2hlZCBvZmYgdGhlIHJlbWFpbmluZyBjb3Jyb3Npb24gd2l0aCBhIHN0aWZmLXdpcmVkIGJydXNoLiBUaGUgc2FtZSBhcnRpY2xlcyByZWNvbW1lbmRlZCB1c2luZyBkaWVsZWN0cmljIGdyZWFzZSB0byBwcmV2ZW50IGNvcnJvc2lvbiBvbiB0aGUgYmF0dGVyeSBwb3N0cy4gSSBkaWRuJ3QgaGF2ZSB0aGF0IHJlYWRpbHkgYXZhaWxhYmxlOyBidXQgYXBwYXJlbnRseSBbcGV0cm9sZXVtIGplbGx5XShodHRwczovL2Jsb2cuZmlyZXN0b25lY29tcGxldGVhdXRvY2FyZS5jb20vYmF0dGVyaWVzL2hvdy10by1jbGVhbi1iYXR0ZXJ5LXRlcm1pbmFscy8pIGNhbiBiZSB1c2VkIGFzIGEgc3Vic3RpdHV0ZS5bXjRdXG5cblRoZSBuZWdhdGl2ZSBwb3N0IGdhdmUgYSBzYXRpc2Z5aW5nICpwb3AqIHdoZW4gSSB0b3VjaGVkIGl0IGJhY2sgdG9nZXRoZXLigJQgdGhhdCdzIGp1c3QgYW4gZWFnZXIgYXJjIG9mIGVsZWN0cmljaXR5IGZyb20gY29tcGxldGluZyB0aGUgY2lyY3VpdCB0byBhbGwgdGhlIGNhcidzIGVsZWN0cm9uaWNzLiBUaGlzIHRpbWUsIHdoZW4gSSB0dXJuZWQgdGhlIGtleSwgSSBjb3VsZCBoZWFyZCB0aGUgZmFtaWxpYXIgKmNodW5rLWNodW5rKiBvZiB0aGUgc3RhcnRlciBiZWZvcmUgdGhlIGVuZ2luZSByZXZ2ZWQgdG8gbGlmZS4gU3VjY2VzcyFcblxuIyMgMy8xOSBDaGFyZ2UgWW91ciBOZXcgQmF0dGVyeVxuXG5PbmUgd2VlayBsYXRlciwgSSB3YXMgc3dpbW1pbmcgaW4gY29uZmlkZW5jZSBhbmQgZXhjaXRlbWVudC4gSSBoYWQgY29tcGxldGVkIGFub3RoZXIgc3VjY2Vzc2Z1bCBob21lIGF1dG8gcmVwYWlyIHRoYXQgaGFkIHVuZG91YnRlZGx5IHNhdmVkIG1lIGh1bmRyZWRzIG9mIGRvbGxhcnMgaW4gZ2VudWluZSBUb3lvdGEgcGFydHMsIGxhYm9yIGFuZCBCLlMuXG5cbldlIHdlcmUgb25jZSBhZ2FpbiByZWFkeSBmb3IgZGVsaWNpb3VzLCBob2x5IGZyaWVkIGZpc2guIEl0IHdhcyBhbHJlYWR5IHBhaWQgZm9yIGR1cmluZyB0aGUgcHJpb3Igd2VlaydzIGJhdHRlcnkgZGViYWNsZS4gSSByb2xsZWQgaW50byB0aGUgZnJvbnQgc2VhdCwgdHVybmVkIHRoZSBrZXkuLi4gYW5kIG9uY2UgYWdhaW4sIHRoZSBmYW1pbGlhciBmYWRpbmcgZGFzaCBsaWdodHMgb2YgYSBkZWFkIGJhdHRlcnkuXG5cbjxPbmVDb2x1bW4+XG4gIDxJbWFnZVdyYXBwZXJcbiAgICBhbHQ9J0luY29uY2VpdmFibGUhIChhbmltYXRlZCBnaWYgZnJvbSBcIlRoZSBQcmluY2VzcyBCcmlkZVwiKSdcbiAgICBzcmM9XCIvYXNzZXRzL2ltZy9ibG9nL2Nhci1oYWNraW5nL2luY29uY2VpdmFibGUuZ2lmXCJcbiAgICB3aWR0aD17IDI0NSB9XG4gICAgaGVpZ2h0PXsgMjAwIH1cbiAgICBjYXB0aW9uPXsgZmFsc2UgfVxuICAvPlxuPC9PbmVDb2x1bW4+XG5cblRoaXMgdGltZSwgd2UgaGFkIHRoZSB0aW1lIGFuZCBmb3J0aXR1ZGUgdG8gYmF0dGxlIHRoZSBoaWxscyBvZiBQaXR0c2J1cmdoLiBXZSBiaWtlZCB0byB0aGUgY2h1cmNoIGFuZCBnb3Qgb3VyIGZpc2ggc2FuZHdpY2hlcy4gSXQgd2FzIHdvcnRoIHRoZSB0cmlwLCBidXQgaXQgd2FzIHN0aWxsIGEgYml0dGVyc3dlZXQgbWVhbCBrbm93aW5nIHRoYXQgb3VyIGJhdHRlcnkgd29lcyB3ZXJlIHRvIGJlIGNvbnRpbnVlZC4uLlxuXG5UaGUgbmV4dCBkYXksIEkgaGFkIG15IG5laWdoYm9yIGhlbHAgbWUganVtcCB0aGUgY2FyIGFnYWluLiBUaGFua3MgYmUgdG8gWmV1c+KAlCBnb2Qgb2YgZWxlY3RyaWNpdHksIGl0IHN0YXJ0ZWQuIEkgc3dlYXIsIE5pY2ssIEkgd29uJ3QgYXNrIHlvdSBmb3IgYW5vdGhlciBqdW1wIHN0YXJ0IGZvciB0aGUgcmVzdCBvZiBteSBsaWZlLlxuXG5Gb3IgcmVhbC4gQXMgc29vbiBhcyB3ZSBnb3QgaXQgc3RhcnRlZCwgSSBkcm92ZSB0byB0aGUgbmVhcmVzdCAoYWN0dWFsbHksIG5vdCB0aGUgZXZlbiB0aGUgbmVhcmVzdCkgV2FsbWFydCBhbmQgYm91Z2h0IGEgMTIwViBwbHVnLWluIGNoYXJnZXIuXG5cbldlIGtlcHQgdGhlIGNhciBydW5uaW5nIGZvciBhbm90aGVyIGhvdXIgb3Igc28sIGp1c3QgdG8gbWFrZSBzdXJlIHRoZSBiYXR0ZXJ5IHdhcyBnZXR0aW5nIHRvcHBlZC1vZmYuXG5cbiMjIyBUZXN0aW5nIGZvciBQYXJhc2l0aWMgRHJhd1xuXG5PdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIG5leHQgd2VlaywgSSB0b29rIG1lYXN1cmVtZW50cyBhY3Jvc3MgdGhlIGJhdHRlcnkgcG9zdHMuIElmIHRoZSBpc3N1ZSBoYWQgYmVlbiBhIHBhcmFzaXRpYyBkcmFpbuKAlCBzb21lIHNob3J0IGFsb25nIHRoZSBjaXJjdWl0IHRoYXQgd2FzIHB1bGxpbmcgY2hhcmdlIG9mZiB0aGUgYmF0dGVyeTsgdGhlbiBJIG1pZ2h0IGhhdmUgaGFkIGEgcmVhbCBwcm9ibGVtLlxuXG5NZWFzdXJpbmcgYWNyb3NzIHRoZSB0ZXJtaW5hbHMgd2hpbGUgdGhlIGNhciB3YXMgcnVubmluZyBzaG93ZWQgb3ZlciAxNFYsIGNvbmZpcm1pbmcgdGhhdCB0aGUgYWx0ZXJuYXRvciB3YXMgZG9pbmcgaXRzIGpvYi4gQWZ0ZXIgc2h1dC1vZmYsIHRoZSBiYXR0ZXJ5IG1lYXN1cmVkIDEyLjc5ViAoZ29vZCkuIE92ZXIgdGhlIGNvdXJzZSBvZiBhIGRheSwgdGhlIGJhdHRlcnkgZHJvcHBlZCB0byBhYm91dCAxMi41Vi4gVGhpcyBzZWVtZWQgY29uY2VybmluZyBhdCBmaXJzdCwgYnV0IHRoZW4gdGhlIHZvbHRhZ2Ugc2V0dGxlZCBhdCBhYm91dCAxMi40N1YgYW5kIGhlbGQuXG5cbjxPbmVDb2x1bW4+XG4gIDxJbWFnZVdyYXBwZXJcbiAgICBhbHQ9XCJKdXN0IGEgZmV3IG1pbnV0ZXMgYWZ0ZXIgc2h1dHRpbmcgb2ZmIHRoZSBjYXIsIHRoZSBiYXR0ZXJ5IG1lYXN1cmVzIDEyLjc5ViBhY3Jvc3MgdGhlIHBvc3RzLlwiXG4gICAgc3JjPVwiL2Fzc2V0cy9pbWcvYmxvZy9jYXItaGFja2luZy8xMl83OVZfbXVsdGltZXRlci5qcGdcIlxuICAgIHdpZHRoPXsgNTExIH1cbiAgICBoZWlnaHQ9eyA5MDggfVxuICAvPlxuPC9PbmVDb2x1bW4+XG5cbkl0IHdhcyBhIHBhaW4gaW4gdGhlIGJ1dHQ7IGJ1dCBJIHRlc3RlZCB0aGUgZWxlY3RyaWNhbCBzeXN0ZW0gZm9yIFtwYXJhc2l0aWMgZHJhd10oaHR0cHM6Ly91cy5hdXRvbG9naWMuY29tL25ld3MvdGVzdGluZy1wYXJhc2l0aWMtZHJhdy12aWEtZnVzZS12b2x0YWdlLWRyb3ApLiBJIG9wZW5lZCB1cCB0aGUgZnVzZSBjb21wYXJ0bWVudHMgKHRoZXJlIGFyZSBhY3R1YWxseSB0d28pIG9uIG91ciAyMDEwIENhbXJ5LlxuXG5PbmUgaXMgY29udmVuaWVudGx5IGxvY2F0ZWQgdW5kZXIgdGhlIGhvb2QgKG5lYXIgdGhlIGRyaXZlcidzIHNpZGUpLCBhbmQgdGhlIG90aGVyIGlzIHVuYmVsaWV2YWJseSBzdHVwaWQtc2lsbHkgdG8gZ2V0IHRv4oCUIGp1c3QgYmVoaW5kIHRoZSBcImtpY2stcGFuZWxcIiB0cmltICh0aGF0IHBsYXN0aWMgZ3VhcmQganVzdCB1bmRlciB0aGUgc3RlZXJpbmcgd2hlZWwpLlxuXG5JIHdpc2ggc29tZW9uZSBoYWQgdG9sZCBtZSB0byByZWFsbHksIHRydWx5IDxpPmV4aGF1c3QgZXZlcnkgcG9zc2libGUgb3B0aW9uPC9pPiBiZWZvcmUgd2FzdGluZyB5b3VyIHRpbWUgaHVudGluZyBmb3IgcGFyYXNpdGljIGRyYXcuXG5cblRvIGZpbmQgdGhlIHNvdXJjZSBvZiBhIHBhcmFzaXRpYyBkcmFpbiBvbiB5b3VyIGJhdHRlcnksIHlvdSBlc3NlbnRpYWxseSBuZWVkIHRvIHByb2JlIGFjcm9zcyBldmVyeSBmdXNlIHVudGlsIHlvdSBmaW5kIGEgY2lyY3VpdCBkcmF3aW5nIHBvd2VyLiBGcm9tIHRoZXJlLCB5b3UnZCBnZXQgYSBiYWxscGFyayBvZiB3aGVyZSB0byBrZWVwIGxvb2tpbmcuXG5cbjxPbmVDb2x1bW4+XG4gIDxJbWFnZVdyYXBwZXJcbiAgICBhbHQ9XCJUaGUgZnVzZSBjb21wYXJ0bWVudCB1bmRlciB0aGUgaG9vZCBvZiB0aGUgQ2FtcnkuIFNlcmlvdXNseSwgaW1hZ2luZSBob2xkaW5nIGEgbXVsdGltZXRlciBwcm9iZSB0byBlYWNoIG9mIHRob3NlIHRpbnksIGV4cG9zZWQgcGFkcyBvbiBlYWNoIG9mIHRob3NlIGxpdHRsZSBmdXNlcy4uLiBubywgdGhhbmtzLiBOZXZlciBhZ2Fpbi5cIlxuICAgIHNyYz1cIi9hc3NldHMvaW1nL2Jsb2cvY2FyLWhhY2tpbmcvY2FtcnlfZnVzZXMuanBnXCJcbiAgICB3aWR0aD17IDg3MiB9XG4gICAgaGVpZ2h0PXsgNDkzIH1cbiAgLz5cbjwvT25lQ29sdW1uPlxuXG5BZGRpdGlvbmFsbHksIHRvIHRlc3QgZm9yIHBhcmFzaXRpYyBkcmF3IGNvcnJlY3RseSwgeW91IHNob3VsZCByZWFsbHkgaGF2ZSBhIGNoYXJnZWQgYmF0dGVyeS4gSWYgeW91IGhhdmUgYSBjaGFyZ2VkIGJhdHRlcnksIHRoZW4geW91IGNhbiB0ZXN0IHZvbHRhZ2UgZHJvcCBvdmVyIHRpbWUuXG5cbklmIHRoZSB2b2x0YWdlIGRyb3BzIHF1aWNrbHkgb3ZlciB0aGUgY291cnNlIG9mIGZldyBob3VycyAob3IgZHJvcHMgYmVsb3cgMTJWKSB0aGVuIHlvdSBtaWdodCBoYXZlIGEgcmVhc29uIHRvIHN1c3BlY3QgcGFyYXNpdGljIGRyYXcuIEkgZGVmaW5pdGVseSByZWNvbW1lbmQgd2F0Y2hpbmcgdGhpcyBbdmlkZW8gYnkgSHVtYmxlTWVjaGFuaWNdKGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9bFJjajFmUWNXd1UpIGNvdmVyaW5nIHBhcmFzaXRpYyBkcmF3IGFuZCBob3cgdG8gdGVzdCBmb3IgaXQuXG5cbiMjIENhciBSZXBhaXIgTGVzc29ucyBMZWFybmVkXG5cbkFib3V0IGEgbW9udGggbGF0ZXIgbm93LCBhbmQgdGltZSB0byByZWZsZWN0LiBBdCB0aGUgZW5kIG9mIGl0IGFsbCwgSSB0aGluayBpdCBjb3VsZCBoYXZlIGJlZW4gdGhhdCB0aGUgbmV3IGJhdHRlcnkganVzdCBoYWRuJ3QgcmVhY2hlZCBhIGZ1bGwgY2hhcmdlZC5cblxuSXQgX2hhZF8gc2F0IGZvciBhIHdlZWsgaW4gYSBjb2xkIGdhcmFnZS4gWW91IGNhbid0IGJsYW1lIG1l4oCUIEknbSBXRkggYW5kIHdlJ3JlIHN0aWxsIGluIGEgcGFuZGVtaWMuXG5cbk15IGJlc3QgZ3Vlc3MgaXMgdGhhdCB0aGUgc21hbGwgY2hhcmdlIGl0IHJlY2VpdmVkIGluIHRoZSBwb3N0LXN3YXAgamF1bnQgdG8gdGhlIGdyb2Nlcnkgc3RvcmUgKG9uZSB3ZWVrIHByaW9yKSB3YXNuJ3QgZW5vdWdoIHRvIGtlZXAgaXQgYWxpdmUuIEknbSBhbHNvIGNvbnZpbmNlZCB0aGF0IG9uZSBvZiB0aGUgY2hlYXAgVVNCIGRvbmdsZXMgSSBib3VnaHQgYXQgYSBnYXMgc3RhdGlvbiB3YXMgamFja2VkIHVwIChwdW4gdW5pbnRlbmRlZCkuXG5cbkZpbmdlcnMgY3Jvc3NlZCBpdCB3YXMgYSBnbGl0Y2ggYW5kIHRoZSBuZXcgYmF0dGVyeSB3aWxsIGxhc3QgYXQgbGVhc3QgYW5vdGhlciAzIHllYXJzLiBBdCBhbnkgcmF0ZSwgd2Ugbm93IGhhdmUgYW4gZW1lcmdlbmN5IGNoYXJnZXIgZm9yIGZ1dHVyZSBGaXNoIEZyeSBGcmlkYXlzLlxuXG5bXjFdOiBIb3cgdG8gUmVhZCBVUyBCYXR0ZXJ5IERhdGUgQ29kZXMuIFVTIEJhdHRlcnkuIEFwcmlsIDR0aCwgMjAyMS4gW2h0dHBzOi8vd3d3LnVzYmF0dGVyeS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTgvMTAvMjAxNV9VUy1CYXR0ZXJ5LURhdGUtQ29kZXMtMi0xLnBkZl0oaHR0cHM6Ly93d3cudXNiYXR0ZXJ5LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8xMC8yMDE1X1VTLUJhdHRlcnktRGF0ZS1Db2Rlcy0yLTEucGRmKS5cblteMl06IFRoZSBBdmVyYWdlIExpZmUgb2YgQ2FyIEJhdHRlcmllcyBhbmQgNyBUaXBzIHRvIEV4dGVuZCBZb3VyIENhciBCYXR0ZXJ5IExpZmUuIE5hdGlvbndpZGUgQmxvZy4gQXByaWwgNHRoLCAyMDIxLiBbaHR0cHM6Ly9ibG9nLm5hdGlvbndpZGUuY29tL2V4dGVuZC1jYXItYmF0dGVyeS1saWZlLyM6fjp0ZXh0PU9uJTIwYXZlcmFnZSUyQyUyMGNhciUyMGJhdHRlcmllcyUyMGxhc3Qsd2lsbCUyMGxhc3QlMjBpcyUyMHRoZSUyMHdlYXRoZXJdKGh0dHBzOi8vYmxvZy5uYXRpb253aWRlLmNvbS9leHRlbmQtY2FyLWJhdHRlcnktbGlmZS8jOn46dGV4dD1PbiUyMGF2ZXJhZ2UlMkMlMjBjYXIlMjBiYXR0ZXJpZXMlMjBsYXN0LHdpbGwlMjBsYXN0JTIwaXMlMjB0aGUlMjB3ZWF0aGVyKS5cblteM106IFdoYXQgaXMgQ29yZT8gTkFQQS4gQXByaWwgOXRoLCAyMDIxLiBbaHR0cHM6Ly93d3cubmFwYW9ubGluZS5jb20vZW4vd2hhdC1pcy1hLWNvcmVdKGh0dHBzOi8vd3d3Lm5hcGFvbmxpbmUuY29tL2VuL3doYXQtaXMtYS1jb3JlKS5cblteNF06IEhvdyB0byBDbGVhbiBCYXR0ZXJ5IFRlcm1pbmFscyB3aXRoIFN0dWZmIFlvdSBBbHJlYWR5IEhhdmUuIEZpcmVzdG9uZSBCbG9nLiBBcHJpbCA0dGgsIDIwMjEuIFtodHRwczovL2Jsb2cuZmlyZXN0b25lY29tcGxldGVhdXRvY2FyZS5jb20vYmF0dGVyaWVzL2hvdy10by1jbGVhbi1iYXR0ZXJ5LXRlcm1pbmFscy9dKGh0dHBzOi8vYmxvZy5maXJlc3RvbmVjb21wbGV0ZWF1dG9jYXJlLmNvbS9iYXR0ZXJpZXMvaG93LXRvLWNsZWFuLWJhdHRlcnktdGVybWluYWxzLykuXG48L1Byb3NlV3JhcHBlcj4iLCJjb250ZW50X3R5cGUiOiJibG9nIn0=","status":200,"tags":["/[slug]/page"],"url":"http://backend:8000/api/articles/car-hacking"},"revalidate":31536000}