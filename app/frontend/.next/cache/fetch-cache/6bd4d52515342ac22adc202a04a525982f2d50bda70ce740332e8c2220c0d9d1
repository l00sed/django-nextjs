{"kind":"FETCH","data":{"headers":{"allow":"GET, HEAD, OPTIONS","connection":"close","content-length":"8970","content-type":"application/json","cross-origin-opener-policy":"same-origin","date":"Sat, 19 Aug 2023 00:32:32 GMT","link":"<http://backend:8000/webmention/receive>; rel=\"webmention\"","referrer-policy":"same-origin","server":"gunicorn","vary":"Accept, origin, Cookie","x-content-type-options":"nosniff","x-frame-options":"DENY"},"body":"","status":200,"tags":["/[slug]/page"],"url":"http://backend:8000/api/articles/microfactory-2"},"revalidate":31536000}